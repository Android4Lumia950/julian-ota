name: OTA JSON Updater

on:
  workflow_dispatch:

jobs:
  update-json:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl git

      - name: Ensure talkman.json exists
        run: |
          [ -f talkman.json ] || echo '{"response":[]}' > talkman.json

      - name: Fetch releases and update talkman.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: 18.1
          ROMTYPE: UNOFFICIAL
        run: |
          # Fetch releases JSON
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" > releases.json

          OLD_JSON=$(cat talkman.json)
          NEW_JSON="[]"

          # Loop over releases
          RELEASE_COUNT=$(jq length releases.json)
          for i in $(seq 0 $((RELEASE_COUNT-1))); do
            TAG=$(jq -r ".[$i].tag_name" releases.json)
            ASSETS=$(jq -c ".[$i].assets // []" releases.json)
            ASSET_COUNT=$(echo "$ASSETS" | jq length)

            for j in $(seq 0 $((ASSET_COUNT-1))); do
              NAME=$(echo "$ASSETS" | jq -r ".[$j].name")
              SIZE=$(echo "$ASSETS" | jq -r ".[$j].size")

              if [[ "$NAME" == *"-talkman.zip" ]]; then
                URL="https://github.com/${GITHUB_REPOSITORY}/releases/download/$TAG/$NAME"
                DATETIME=$(date +%s)
                ID=""  # SHA256 placeholder
                CHANGELOG=""  # optional

                ENTRY=$(jq -n \
                  --arg dt "$DATETIME" \
                  --arg fn "$NAME" \
                  --arg id "$ID" \
                  --arg romtype "$ROMTYPE" \
                  --arg size "$SIZE" \
                  --arg url "$URL" \
                  --arg version "$VERSION" \
                  --arg cl "$CHANGELOG" \
                  '{datetime: ($dt|tonumber), filename: $fn, id: $id, romtype: $romtype, size: ($size|tonumber), url: $url, version: $version, changelog: $cl}')

                # Only add if filename doesn't exist in old JSON
                EXISTS=$(echo "$OLD_JSON" | jq --arg fn "$NAME" '.response[]? | select(.filename == $fn)')
                if [ -z "$EXISTS" ]; then
                    NEW_JSON=$(echo "$NEW_JSON" | jq ". + [$ENTRY]")
                fi
              fi
            done
          done

          # Merge old + new
          UPDATED_JSON=$(echo "$OLD_JSON" | jq --argjson new "$NEW_JSON" '.response = (.response // []) + $new')
          echo "$UPDATED_JSON" > talkman.json

      - name: Commit updated talkman.json
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add talkman.json
          git commit -m "Update talkman.json from GitHub Release(s) [skip ci]" || echo "No changes to commit"
          git push
